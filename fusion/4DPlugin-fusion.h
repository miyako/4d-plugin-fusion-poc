/* --------------------------------------------------------------------------------
 #
 #	4DPlugin-fusion.h
 #	source generated by 4D Plugin Wizard
 #	Project : fusion
 #	author : miyako
 #	2020/05/19
 #  
 # --------------------------------------------------------------------------------*/

#ifndef PLUGIN_FUSION_H
#define PLUGIN_FUSION_H

#include "4DPluginAPI.h"

#include <mutex>
#include <vector>

#include "C_TEXT.h"
#include "C_LONGINT.h"
#include "4DPlugin-JSON.h"

#pragma mark -

static void fusion_send_message(PA_PluginParameters params);
static void fusion_on_event_call(PA_PluginParameters params);

#pragma mark -

#define CMD_INVOKE_ACTION 1439
#define ak_current_form 1
#define ak_main_form 2
#define ak_copy "c\0o\0p\0y\0\0\0"
#define ak_paste "p\0a\0s\0t\0e\0\0\0"
#define CMD_SET_TEXT_TO_PASTEBOARD 523

static void invoke_action(const char *action, int target = ak_main_form);
static void invoke_copy_action();
static void invoke_paste_action();
static void set_text_to_pasteboard(std::wstring &value);

typedef PA_long32 process_number_t;
typedef PA_long32 process_stack_size_t;
typedef PA_long32 method_id_t;
typedef PA_Unichar* process_name_t;
typedef int internal_window_number_t;

typedef enum {
    fusion_event_copy       = 0,
    fusion_event_paste      = 1
} fusion_event_t;

static void fusion_invoke_method(int event, std::wstring& message);

static void listenerLoop(void);
static void listenerLoopStart(void);
static void listenerLoopFinish(void);
static void listenerLoopExecute(void);
static void listenerLoopExecuteMethod(void);

#if VERSIONWIN
LRESULT CALLBACK onEventCall(int code, WPARAM wParam, LPARAM lParam);
#endif

#endif /* PLUGIN_FUSION_H */
